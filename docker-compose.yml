services:
  ## ---------- Data Stores ----------
  postgres:
    image: postgres:15-alpine
    restart: unless-stopped
    environment:
      POSTGRES_DB: reality_core
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    ports:
      - "5432:5432" # Expose PostgreSQL port to host machine
    volumes:
      - pg_data:/var/lib/postgresql/data
    healthcheck:
      # Use psql via CMD-SHELL; PGPASSWORD should be picked up from the service environment
      test: ["CMD-SHELL", "psql -h localhost -U $$POSTGRES_USER -d $$POSTGRES_DB -c 'SELECT 1'"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    command: ["redis-server", "--save", "60", "1", "--loglevel", "warning"]
    restart: unless-stopped
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis-test:
    image: redis:7-alpine
    command: ["redis-server", "--loglevel", "warning"] # Simple command for testing
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5

  ## ---------- Kafka + ZooKeeper ----------
  zookeeper:
    image: confluentinc/cp-zookeeper:7.6.0
    restart: unless-stopped
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    healthcheck:
      # Simpler health check: Check if the port is open using bash internal TCP check
      test: ["CMD", "bash", "-c", "exec 3<>/dev/tcp/localhost/2181 && echo OK"]
      interval: 30s
      timeout: 15s
      retries: 10

  kafka:
    image: confluentinc/cp-kafka:7.6.0
    depends_on:
      zookeeper:
        condition: service_healthy
    restart: unless-stopped
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1 # Explicitly set for single node
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1 # For single node
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1 # For single node
    healthcheck:
      test: ["CMD", "bash", "-c", "kafka-topics --bootstrap-server localhost:9092 --list"]
      interval: 30s
      timeout: 10s
      retries: 5

  schema-registry:
    image: confluentinc/cp-schema-registry:7.6.0
    depends_on:
      kafka:
        condition: service_healthy
    restart: unless-stopped
    ports:
      - "8081:8081"
    environment:
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: PLAINTEXT://kafka:9092
      SCHEMA_REGISTRY_LISTENERS: http://0.0.0.0:8081
    healthcheck:
      # Check if the subjects endpoint is available
      test: ["CMD", "curl", "-f", "http://localhost:8081/subjects"]
      interval: 10s # Check more frequently initially
      timeout: 5s
      retries: 5    # Retry 5 times

  ## ---------- Graph DB ----------
  neo4j:
    image: neo4j:5.20
    restart: unless-stopped
    environment:
      NEO4J_AUTH: neo4j/${NEO4J_PASSWORD}
    ports:
      - "7474:7474"   # HTTP
      - "7687:7687"   # Bolt
    volumes:
      - neo4j_data:/data
    healthcheck:
      test: ["CMD", "cypher-shell", "-u", "neo4j", "-p", "${NEO4J_PASSWORD}", "RETURN 1"]
      interval: 20s
      timeout: 10s
      retries: 5

  ## ---------- Core Application Containers ----------
  api:
    build:
      context: .
      dockerfile: Dockerfile
    command: ["uvicorn", "main:app", "--host", "0.0.0.0", "--port", "8000"]
    environment:
      DATABASE_URL: postgresql+psycopg://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/reality_core
      REDIS_URL: redis://redis:6379/0
      KAFKA_BOOTSTRAP: kafka:9092
      SCHEMA_REGISTRY_URL: http://schema-registry:8081
      NEO4J_URI: bolt://neo4j:7687
      NEO4J_USER: neo4j
      NEO4J_PASSWORD: ${NEO4J_PASSWORD}
      JWT_SECRET_KEY: ${JWT_SECRET_KEY}
    volumes:
      - ./:/app:ro
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka:
        condition: service_healthy
      neo4j:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 5

  celery_worker:
    build:
      context: .
      dockerfile: Dockerfile
    command: ["celery", "-A", "tasks", "worker", "-Q", "default", "--loglevel=INFO"]
    environment:
      CELERY_BROKER_URL: redis://redis:6379/1
      DATABASE_URL: postgresql+psycopg://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/reality_core
      KAFKA_BOOTSTRAP: kafka:9092
      SCHEMA_REGISTRY_URL: http://schema-registry:8081
    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy

  log_writer:
    build:
      context: .
      dockerfile: Dockerfile
    command: ["python", "-m", "src.services.log_writer"]
    environment:
      DATABASE_URL: postgresql+psycopg://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/reality_core
      KAFKA_BOOTSTRAP: kafka:9092
      SCHEMA_REGISTRY_URL: http://schema-registry:8081
    depends_on:
      kafka:
        condition: service_healthy
      postgres:
        condition: service_healthy

  chart_calc:
    build:
      context: .
      dockerfile: Dockerfile
    command: ["uvicorn", "services.chart_calc.app:app", "--host", "0.0.0.0", "--port", "9000"]
    environment:
      REDIS_URL: redis://redis:6379/0
      KAFKA_BOOTSTRAP: kafka:9092
      SCHEMA_REGISTRY_URL: http://schema-registry:8081
    depends_on:
      redis:
        condition: service_healthy

## ---------- Test Runner ----------
  test:
    build:
      context: .
      dockerfile: Dockerfile
      # No target needed, uses the default build which includes deps
    command: ["sh", "-c", "echo '--- Environment Variables ---' && printenv | grep JWT && printenv | grep PYTHONPATH && echo '--- Running Pytest ---' && python3 -m pytest"]
    environment:
      # Use internal service names for Kafka and Schema Registry
      KAFKA_BOOTSTRAP: kafka:9092
      SCHEMA_REGISTRY_URL: http://schema-registry:8081
      REDIS_URL: redis://redis-test:6379/0 # Point to the dedicated test Redis service
      # Add JWT paths for testing (can point to dummy/test keys if needed)
      JWT_PRIVATE_KEY_PATH: /app/config/keys/dummy_jwt_private_key.pem
      JWT_PUBLIC_KEY_PATH: /app/config/keys/dummy_jwt_public_key.pem
      JWT_SECRET_KEY: test_secret_key # Use a fixed secret for testing if applicable
      PASSWORD_PEPPER: ${PASSWORD_PEPPER} # Inherit from .env
      # Inherit other necessary env vars if needed (e.g., for DB access in other tests)
      # POSTGRES_USER: ${POSTGRES_USER}
      # POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      # NEO4J_PASSWORD: ${NEO4J_PASSWORD}
      PYTHONPATH: /app # Ensure src is importable
      TEST_DEBUG_VAR: "HelloFromTestService"
      # Testcontainers configuration (Redis part removed)
    volumes:
      - ./:/app # Mount current code for testing
      - ./config/keys:/app/config/keys:ro # Mount the keys directory
      # Docker socket mount removed as testcontainers is not managing Redis
    depends_on:
      kafka:
        condition: service_healthy
      schema-registry:
        condition: service_healthy
      # Add other dependencies if tests require them (e.g., postgres, redis)
      # postgres:
      #   condition: service_healthy
      redis-test:
        condition: service_healthy
    # On Linux you may also need:
networks:
  default:
    name: reality_net

volumes:
  pg_data:
  redis_data:
  neo4j_data: